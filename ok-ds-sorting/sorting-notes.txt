Complexity Notations: Ω (Best), θ (Average), O (Worst)

Stable Sort - if equals elements appear in the same order as the input
In-Place Sort - if it uses constant extra space (or modifies input array)

Quick Sort
 - Stable? - default implementation is not, but can be made by considering indexes as comparison parameters
 - In-Place? - Yes
 - Complexity Analysis
   T(n) = T(k) + T(n - k - 1) + θ(n)
   - k is number of elements smaller than pivot
   - θ(n) is partitioning process
   - Worst Case
     - Occurs when partition always picks greatest or smallest element as pivot
     - Array is already sorted in ascending/descending order
     - T(n) = T(0) + T(n - 1) + θ(n)
     - O(n^2)
   - Base Case
     - Occurs when partition always picks middle element as pivot
     - T(n) = 2 T(n / 2) + P(n)
     - Ω(n log n)
   - Average Case
     - T(n) = T(n / 9) + T(9n / 10) + P(n)
     - θ(n log n)
 - Optimizing O(n) stack space used during recursion
   - after partitioning, we can recursively solve smaller partition and iteratively solve the larger partition
   - also called tail recursion call optimization
 - Iterative Quick Sort
   - can be implemented using stack with O(n) space
 - Dual Pivot Quick Sort
   - <LP, LP, LP <= and <= RP, RP, RP<
 - Preference over Merge Sort
   - no extra space
   - although it has worst case of O(n ^ 2), randomized version can be used
   - cache friendly when used with arrays

Merge Sort
 - Stable? - Yes
 - In-Place? - No
 - Time Complexity (Best, Average, Worst)
   - T(n) = 2 T(n / 2) + Theta(n)
   - O(n log n)
 - Auxiliary Space
   - O(n)
 - Preference over Quick Sort
   - sorting linked lists in O(n log n)
   - access data from linked list sequentially
   - for sorting linked lists, no extra space is required

Sort that does minimum memory writes
 - Selection sort as it does O(n) swaps